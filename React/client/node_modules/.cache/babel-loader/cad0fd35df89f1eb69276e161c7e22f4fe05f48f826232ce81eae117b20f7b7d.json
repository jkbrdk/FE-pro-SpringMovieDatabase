{"ast":null,"code":"/*  _____ _______         _                      _\r\n * |_   _|__   __|       | |                    | |\r\n *   | |    | |_ __   ___| |___      _____  _ __| | __  ___ ____\r\n *   | |    | | '_ \\ / _ \\ __\\ \\ /\\ / / _ \\| '__| |/ / / __|_  /\r\n *  _| |_   | | | | |  __/ |_ \\ V  V / (_) | |  |   < | (__ / /\r\n * |_____|  |_|_| |_|\\___|\\__| \\_/\\_/ \\___/|_|  |_|\\_(_)___/___|\r\n *                                _\r\n *              ___ ___ ___ _____|_|_ _ _____\r\n *             | . |  _| -_|     | | | |     |  LICENCE\r\n *             |  _|_| |___|_|_|_|_|___|_|_|_|\r\n *             |_|\r\n *\r\n *   PROGRAMOVÁNÍ  <>  DESIGN  <>  PRÁCE/PODNIKÁNÍ  <>  HW A SW\r\n *\r\n * Tento zdrojový kód je součástí výukových seriálů na\r\n * IT sociální síti WWW.ITNETWORK.CZ\r\n *\r\n * Kód spadá pod licenci prémiového obsahu a vznikl díky podpoře\r\n * našich členů. Je určen pouze pro osobní užití a nesmí být šířen.\r\n * Více informací na http://www.itnetwork.cz/licence\r\n */\n\nconst API_URL = \"http://localhost:8080\";\nexport class HttpRequestError extends Error {\n  constructor(response) {\n    super(`Network response was not ok: ${response.status} ${response.statusText}`);\n    this.response = response;\n  }\n}\nconst fetchData = (url, requestOptions) => {\n  const apiUrl = `${API_URL}${url}`;\n  const allRequestOptions = {\n    credentials: \"include\",\n    ...requestOptions\n  };\n  return fetch(apiUrl, allRequestOptions).then(response => {\n    if (!response.ok) {\n      throw new HttpRequestError(response);\n    }\n    return response.json();\n  }).catch(error => {\n    throw error;\n  });\n};\nexport const apiGet = (url, params) => {\n  const filteredParams = Object.fromEntries(Object.entries(params || {}).filter(([_, value]) => value != null));\n  const apiUrl = `${url}?${new URLSearchParams(filteredParams)}`;\n  const requestOptions = {\n    method: \"GET\"\n  };\n  return fetchData(apiUrl, requestOptions);\n};\nexport const apiPost = (url, data) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  };\n  return fetchData(url, requestOptions);\n};\nexport const apiPut = (url, data) => {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  };\n  return fetchData(url, requestOptions);\n};\nexport const apiDelete = url => {\n  const requestOptions = {\n    method: \"DELETE\"\n  };\n  return fetchData(url, requestOptions);\n};","map":{"version":3,"names":["API_URL","HttpRequestError","Error","constructor","response","status","statusText","fetchData","url","requestOptions","apiUrl","allRequestOptions","credentials","fetch","then","ok","json","catch","error","apiGet","params","filteredParams","Object","fromEntries","entries","filter","_","value","URLSearchParams","method","apiPost","data","headers","body","JSON","stringify","apiPut","apiDelete"],"sources":["C:/Users/ASUS/Downloads/React/React/client/src/utils/api.js"],"sourcesContent":["/*  _____ _______         _                      _\r\n * |_   _|__   __|       | |                    | |\r\n *   | |    | |_ __   ___| |___      _____  _ __| | __  ___ ____\r\n *   | |    | | '_ \\ / _ \\ __\\ \\ /\\ / / _ \\| '__| |/ / / __|_  /\r\n *  _| |_   | | | | |  __/ |_ \\ V  V / (_) | |  |   < | (__ / /\r\n * |_____|  |_|_| |_|\\___|\\__| \\_/\\_/ \\___/|_|  |_|\\_(_)___/___|\r\n *                                _\r\n *              ___ ___ ___ _____|_|_ _ _____\r\n *             | . |  _| -_|     | | | |     |  LICENCE\r\n *             |  _|_| |___|_|_|_|_|___|_|_|_|\r\n *             |_|\r\n *\r\n *   PROGRAMOVÁNÍ  <>  DESIGN  <>  PRÁCE/PODNIKÁNÍ  <>  HW A SW\r\n *\r\n * Tento zdrojový kód je součástí výukových seriálů na\r\n * IT sociální síti WWW.ITNETWORK.CZ\r\n *\r\n * Kód spadá pod licenci prémiového obsahu a vznikl díky podpoře\r\n * našich členů. Je určen pouze pro osobní užití a nesmí být šířen.\r\n * Více informací na http://www.itnetwork.cz/licence\r\n */\r\n\r\n\r\nconst API_URL = \"http://localhost:8080\";\r\n\r\nexport class HttpRequestError extends Error {\r\n    constructor(response) {\r\n        super(`Network response was not ok: ${response.status} ${response.statusText}`);\r\n        this.response = response;\r\n    }\r\n}\r\n\r\nconst fetchData = (url, requestOptions) => {\r\n    const apiUrl = `${API_URL}${url}`;\r\n\r\n    const allRequestOptions = {credentials: \"include\", ...requestOptions};\r\n\r\n    return fetch(apiUrl, allRequestOptions)\r\n        .then((response) => {\r\n            if (!response.ok) {\r\n                throw new HttpRequestError(response);\r\n            }\r\n            return response.json();\r\n        })\r\n        .catch((error) => {\r\n            throw error;\r\n        });\r\n};\r\n\r\nexport const apiGet = (url, params) => {\r\n    const filteredParams = Object.fromEntries(\r\n        Object.entries(params || {}).filter(([_, value]) => value != null)\r\n    );\r\n\r\n    const apiUrl = `${url}?${new URLSearchParams(filteredParams)}`;\r\n    const requestOptions = {\r\n        method: \"GET\",\r\n    };\r\n\r\n    return fetchData(apiUrl, requestOptions);\r\n};\r\n\r\nexport const apiPost = (url, data) => {\r\n    const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n    };\r\n\r\n    return fetchData(url, requestOptions);\r\n};\r\n\r\nexport const apiPut = (url, data) => {\r\n    const requestOptions = {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n    };\r\n\r\n    return fetchData(url, requestOptions);\r\n};\r\n\r\nexport const apiDelete = (url) => {\r\n    const requestOptions = {\r\n        method: \"DELETE\",\r\n    };\r\n\r\n    return fetchData(url, requestOptions);\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,MAAMA,OAAO,GAAG,uBAAuB;AAEvC,OAAO,MAAMC,gBAAgB,SAASC,KAAK,CAAC;EACxCC,WAAWA,CAACC,QAAQ,EAAE;IAClB,KAAK,CAAE,gCAA+BA,QAAQ,CAACC,MAAO,IAAGD,QAAQ,CAACE,UAAW,EAAC,CAAC;IAC/E,IAAI,CAACF,QAAQ,GAAGA,QAAQ;EAC5B;AACJ;AAEA,MAAMG,SAAS,GAAGA,CAACC,GAAG,EAAEC,cAAc,KAAK;EACvC,MAAMC,MAAM,GAAI,GAAEV,OAAQ,GAAEQ,GAAI,EAAC;EAEjC,MAAMG,iBAAiB,GAAG;IAACC,WAAW,EAAE,SAAS;IAAE,GAAGH;EAAc,CAAC;EAErE,OAAOI,KAAK,CAACH,MAAM,EAAEC,iBAAiB,CAAC,CAClCG,IAAI,CAAEV,QAAQ,IAAK;IAChB,IAAI,CAACA,QAAQ,CAACW,EAAE,EAAE;MACd,MAAM,IAAId,gBAAgB,CAACG,QAAQ,CAAC;IACxC;IACA,OAAOA,QAAQ,CAACY,IAAI,CAAC,CAAC;EAC1B,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;IACd,MAAMA,KAAK;EACf,CAAC,CAAC;AACV,CAAC;AAED,OAAO,MAAMC,MAAM,GAAGA,CAACX,GAAG,EAAEY,MAAM,KAAK;EACnC,MAAMC,cAAc,GAAGC,MAAM,CAACC,WAAW,CACrCD,MAAM,CAACE,OAAO,CAACJ,MAAM,IAAI,CAAC,CAAC,CAAC,CAACK,MAAM,CAAC,CAAC,CAACC,CAAC,EAAEC,KAAK,CAAC,KAAKA,KAAK,IAAI,IAAI,CACrE,CAAC;EAED,MAAMjB,MAAM,GAAI,GAAEF,GAAI,IAAG,IAAIoB,eAAe,CAACP,cAAc,CAAE,EAAC;EAC9D,MAAMZ,cAAc,GAAG;IACnBoB,MAAM,EAAE;EACZ,CAAC;EAED,OAAOtB,SAAS,CAACG,MAAM,EAAED,cAAc,CAAC;AAC5C,CAAC;AAED,OAAO,MAAMqB,OAAO,GAAGA,CAACtB,GAAG,EAAEuB,IAAI,KAAK;EAClC,MAAMtB,cAAc,GAAG;IACnBoB,MAAM,EAAE,MAAM;IACdG,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI;EAC7B,CAAC;EAED,OAAOxB,SAAS,CAACC,GAAG,EAAEC,cAAc,CAAC;AACzC,CAAC;AAED,OAAO,MAAM2B,MAAM,GAAGA,CAAC5B,GAAG,EAAEuB,IAAI,KAAK;EACjC,MAAMtB,cAAc,GAAG;IACnBoB,MAAM,EAAE,KAAK;IACbG,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,IAAI;EAC7B,CAAC;EAED,OAAOxB,SAAS,CAACC,GAAG,EAAEC,cAAc,CAAC;AACzC,CAAC;AAED,OAAO,MAAM4B,SAAS,GAAI7B,GAAG,IAAK;EAC9B,MAAMC,cAAc,GAAG;IACnBoB,MAAM,EAAE;EACZ,CAAC;EAED,OAAOtB,SAAS,CAACC,GAAG,EAAEC,cAAc,CAAC;AACzC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}